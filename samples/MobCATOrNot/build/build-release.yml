stages:
- stage: UnitTests
  jobs:
  - job: UnitTests
    displayName: Run Unit Tests
    pool:
      name: Hosted VS2017
      demands:
      - msbuild
      - vstest

    steps:
    - script: echo Run UnitTests Stage!

    - task: NuGetToolInstaller@1
      displayName: Use Nuget 4.3.0
      inputs:
        versionSpec: '4.3.0'
      enabled: "false"

    - task: NuGetCommand@2
      displayName: 'NuGet restore'
      inputs:
        restoreSolution: samples/weather/xamarin/Weather.sln
      enabled: "false"

    - task: MSBuild@1
      displayName: 'Build UnitTests'
      inputs:
        solution: samples/weather/xamarin/Weather.UnitTests/Weather.UnitTests.csproj
      enabled: "false"

- stage: BuildUITestXamarinAndroid
  dependsOn: UnitTests    # this stage runs after Test
  jobs:
  - job: BuildXamarinAndroid
    displayName: Build Xamarin Android
    pool:
      name: Hosted macOS
      demands:
      - MSBuild
      - Xamarin.Android
      
    steps:
    - script: echo Build Xamarin Android Stage!

    - task: Bash@3
      displayName: 'Update Version'
      inputs:
        targetType: filePath
        filePath: samples/MobCATOrNot/build/version.sh
        arguments: '-b $(Build.BuildID) -e $(AppEnv)'

    - task: Bash@3
      displayName: 'Update App Secrets'
      inputs:
        targetType: filePath
        filePath: samples/MobCATOrNot/build/appsecrets.sh

    - task: NuGetToolInstaller@1
      displayName: Use Nuget 4.3.0
      inputs:
        versionSpec: '4.3.0'

    - task: NuGetCommand@2
      displayName: 'NuGet restore'
      inputs:
        restoreSolution: samples/MobCATOrNot/MobCATOrNot.sln

    - task: XamarinAndroid@1
      displayName: 'Build Xamarin.Android App'
      inputs:
        projectFile: samples/MobCATOrNot/MobCATOrNot.Android/MobCATOrNot.Droid.csproj
        configuration: '$(BuildConfiguration)'
        createAppPackage: true
        jdkOption: 'JDKVersion'

    - task: AndroidSigning@3
      inputs:
        apkFiles: '**/*.apk'
        apksignerKeystoreFile: 'android.keystore'
        apksignerKeystorePassword: '$(keystorePassword)'
        apksignerKeystoreAlias: 'android'
        apksignerKeyPassword: '$(keystorePassword)'

    - task: CopyFiles@2
      displayName: 'Stage Android Artifact'
      inputs:
        SourceFolder: 'samples/MobCATOrNot/MobCATOrNot.Android/bin/$(BuildConfiguration)'
        Contents: '*.apk'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop_android'
        publishLocation: 'Container'

  - job: RunUITests
    dependsOn: BuildXamarinAndroid
    displayName: Run UITests Android

    steps:
    - script: echo Run Xamarin UITest Job!

    - task: MSBuild@1
      displayName: 'Build UITests'
      inputs:
        solution: samples/weather/xamarin/Weather.UITests/Weather.UITests.csproj
        configuration: '$(BuildConfiguration)'
      enabled: "false"

    - task: AppCenterTest@1
      displayName: 'Test Android with Visual Studio App Center'
      inputs:
        appFile: '$(Build.ArtifactStagingDirectory)/*.apk'
        frameworkOption: uitest
        uiTestBuildDirectory: 'samples/weather/xamarin/Weather.UITests/bin/$(BuildConfiguration)'
        serverEndpoint: 'App Center'
        appSlug: '$(AppCenterDroidSlug)'
        devices: '$(AppCenterDroidDevices)'
        runOptions: '--test-output-dir $(Build.ArtifactStagingDirectory)/AppCenterTestResult'
      enabled: "false"

    - task: Bash@3
      displayName: 'Unzip UITests Result XML'
      inputs:
        targetType: 'inline'
        script: 'echo "Folder $(Build.ArtifactStagingDirectory)/AppCenterTestResult contents"
          cd $(Build.ArtifactStagingDirectory)/AppCenterTestResult
          ls -a
          
          unzip nunit_xml_zip.zip'
      enabled: "false"

    - task: PublishTestResults@2
      displayName: 'Publish UI Test Results'
      inputs:
        testResultsFormat: NUnit
        testResultsFiles: '$(Build.ArtifactStagingDirectory)/AppCenterTestResult/*.xml'
        mergeTestResults: true
      enabled: "false"

- stage: DistributeXamarinAndroid
  dependsOn: BuildUITestXamarinAndroid    # this stage runs after Test
  jobs:
  - job: DistributeXamarinAndroid
    displayName: Distribute Android
    pool:
      name: Hosted macOS
      
    steps:
    - script: echo Distribute Xamarin Android Stage!

    - task: DownloadPipelineArtifact@0
      inputs:
        artifactName: 'drop_android'
        targetPath: $(Build.ArtifactStagingDirectory)

    - task: AppCenterDistribute@3
      inputs:
        serverEndpoint: 'App Center'
        appSlug: 'Mobile-Customer-Advisory-Team/MobCATOrNot.Droid'
        appFile: '$(Build.ArtifactStagingDirectory)/drop_android/*.apk'
        releaseNotesOption: 'input'
        releaseNotesInput: 'CI-Release'
        destinationType: 'groups'
        distributionGroupId: '$(AppCenterDroidDistrubution)'
        isSilent: true

- stage: BuildUITestXamariniOS
  dependsOn: UnitTests    # this stage runs in parallel with DeployUS1, after Test 
  jobs:
  - job: BuildXamariniOS
    displayName: Build Xamarin iOS
    pool:
      name: Hosted macOS
      demands:
      - xcode
      - Xamarin.iOS
      - msbuild

    steps:
    - script: echo Build Xamarin iOS Stage!

    - task: Bash@3
      displayName: 'Update Version'
      inputs:
        targetType: filePath
        filePath: samples/MobCATOrNot/build/version.sh
        arguments: '-b $(Build.BuildID) -e $(AppEnv)'

    - task: Bash@3
      displayName: 'Update App Secrets'
      inputs:
        targetType: filePath
        filePath: samples/MobCATOrNot/build/appsecrets.sh

    - task: NuGetToolInstaller@1
      displayName: Use Nuget 4.3.0
      inputs:
        versionSpec: '4.3.0'

    - task: NuGetCommand@2
      displayName: 'NuGet restore'
      inputs:
        restoreSolution: samples/MobCATOrNot/MobCATOrNot.sln
    
    - task: InstallAppleCertificate@2
      displayName: 'Install an Apple certificate'
      inputs:
        certSecureFile: 'Sweeky_Cert.p12'
        certPwd: '$(P12password)'

    - task: InstallAppleProvisioningProfile@1
      displayName: 'Install an Apple provisioning profile'
      inputs:
        provProfileSecureFile: 'VS_WildCard_Development.mobileprovision'

    - task: XamariniOS@2
      displayName: 'Build Xamarin.iOS App'
      inputs:
        solutionFile: samples/MobCATOrNot/MobCATOrNot.sln
        configuration: '$(BuildConfiguration)'
        runNugetRestore: true
        packageApp: true
        # signingIdentity: '$(APPLE_CERTIFICATE_SIGNING_IDENTITY)'
        # signingProvisioningProfileID: '$(APPLE_PROV_PROFILE_UUID)'

    - task: CopyFiles@2
      displayName: 'Stage iOS Artifact'
      inputs:
        SourceFolder: 'samples/MobCATOrNot/MobCATOrNot.iOS/bin/iPhone/Release'
        Contents: '*.ipa'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: drop_ios'
      inputs:
        ArtifactName: 'drop_ios'
        publishLocation: 'Container'
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'

  - job: RunUITests
    dependsOn: BuildXamariniOS
    displayName: Run UITests iOS

    steps:
    - script: echo Run Xamarin UITest Job!

    - task: MSBuild@1
      displayName: 'Build UITests'
      inputs:
        solution: samples/weather/xamarin/Weather.UITests/Weather.UITests.csproj
        configuration: '$(BuildConfiguration)'
      enabled: "false"

    - task: AppCenterTest@1
      displayName: 'Test iOS with Visual Studio App Center'
      inputs:
        appFile: '$(Build.ArtifactStagingDirectory)/*.ipa'
        frameworkOption: uitest
        uiTestBuildDirectory: 'samples/weather/xamarin/Weather.UITests/bin/$(BuildConfiguration)'
        serverEndpoint: 'App Center'
        appSlug: '$(AppCenteriOSSlug)'
        devices: '$(AppCenteriOSDevices)'
        runOptions: '--test-output-dir $(Build.ArtifactStagingDirectory)/AppCenterTestResult'
      enabled: "false"

    - task: Bash@3
      displayName: 'Unzip UITests Result XML'
      inputs:
        targetType: 'inline'
        script: 'echo "Folder $(Build.ArtifactStagingDirectory)/AppCenterTestResult contents"
          cd $(Build.ArtifactStagingDirectory)/AppCenterTestResult
          ls -a
          
          unzip nunit_xml_zip.zip'
      enabled: "false"

    - task: PublishTestResults@2
      displayName: 'Publish UI Test Results'
      inputs:
        testResultsFormat: NUnit
        testResultsFiles: '$(Build.ArtifactStagingDirectory)/AppCenterTestResult/*.xml'
        mergeTestResults: true
      enabled: "false"

- stage: DistributeXamariniOS
  dependsOn: BuildUITestXamariniOS    # this stage runs after Test
  jobs:
  - job: DistributeXamariniOS
    displayName: Distribute iOS
    pool:
      name: Hosted macOS

    steps:
    - script: echo Distribute Xamarin iOS Stage!

    - task: DownloadPipelineArtifact@0
      inputs:
        artifactName: 'drop_ios'
        targetPath: $(Build.ArtifactStagingDirectory)

    - task: AppCenterDistribute@3
      inputs:
        serverEndpoint: 'App Center'
        appSlug: 'Mobile-Customer-Advisory-Team/MobCATOrNot.iOS'
        appFile: '$(Build.ArtifactStagingDirectory)/drop_ios/*.ipa'
        releaseNotesOption: 'input'
        releaseNotesInput: 'CI-Release'
        destinationType: 'groups'
        distributionGroupId: '$(AppCenteriOSDistribution)'
        isSilent: true